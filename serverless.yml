service: aws-serverless-nodejs-log-forwarder

plugins:
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, 'dev'}

  versionFunctions: false

custom:
  BATCH_SIZE: 1000
  LOG_GROUP_RETENTION_IN_DAYS: 1
  KINESIS_RETENTION_IN_HOURS: 24
  KINESIS_SHARD_COUNT: 1
  PREFIX: '/aws/lambda'

functions:
  ship-logs-to-s3:
    handler: extract/s3/functions/shipper.handler
    description: Sends CloudWatch logs from Kinesis to S3
    memorySize: 128
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - LogsKinesisStream
              - Arn
          batchSize: 
    


resources:
  Resources:
    LogsKinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:service}-${self:provider.stage}-logs
        ShardCount: ${self:custom.KINESIS_SHARD_COUNT}
        RetentionPeriodHours: ${self:custom.KINESIS_RETENTION_IN_HOURS}

    CloudWatchLogsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - logs.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:PutRecords
                    - kinesis:PutRecord
                  Resource:
                    Fn::GetAtt:
                      - LogsKinesisStream
                      - Arn
        RoleName: ${self:service}-${self:provider.stage}-cloudwatchrole

    FirehoseRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: ${self:service}-${self:provider.stage}-FirehoseRole
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - firehose.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: root
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: s3:*
                    Resource:
                      Fn::Sub: arn:aws:s3:::${self:service}-${self:provider.stage}-data
                      
    LogExtractorFirehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:service}-${self:provider.stage}-LogExtractorFirehose
        S3DestinationConfiguration:
          BucketARN:
            Fn::Sub: arn:aws:s3:::${self:service}-${self:provider.stage}-data
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          CompressionFormat: UNCOMPRESSED
          RoleARN:
            Fn::GetAtt: [FirehoseRole, Arn]